<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.mapper.DiscussionCommentMapper">
    <!-- 찬성 값 증가 -->
    <update id="incrementLike">
        UPDATE discussion_comment
        SET `like` = `like` + 1
        WHERE id = #{commentId}
    </update>
    <!-- 반대 값 증가 -->
    <update id="incrementUnlike">
        UPDATE discussion_comment
        SET `unlike` = `unlike` + 1
        WHERE id = #{commentId}
    </update>
    <!-- 찬/반 합산 조회 -->
    <select id="getTotalVotesByCommentId" resultType="java.lang.Integer">
        SELECT (`like` + `unlike`) AS totalVotes
        FROM discussion_comment
        WHERE id = #{commentId}
    </select>
    <!-- 특정 댓글 작성자 조회 -->
    <select id="getUserIdByCommentId" resultType="java.lang.String">
        SELECT user_id
        FROM discussion_comment
        WHERE id = #{commentId}
    </select>
    <!-- 특정 토론의 댓글 수 조회 -->
    <select id="getCommentCountByDiscussion" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM discussion_comment
        WHERE discussion_id = #{discussionId}
    </select>
    <!-- 댓글 추가 -->
    <insert id="addComment">
        INSERT INTO discussion_comment (id, content, `like`, unlike, voted_user_ids, created_at, updated_at, user_id, discussion_id)
        VALUES (NULL, #{content}, 0, 0, NULL, DEFAULT, DEFAULT, #{userId}, #{discussionId})
    </insert>
    <!-- 사용자 투표 여부 확인 -->
    <select id="hasUserVoted" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM discussion_comment
        WHERE id = #{commentId} AND FIND_IN_SET(#{userId}, voted_user_ids) > 0
    </select>
    <!-- 사용자 투표 기록 추가 -->
    <update id="addUserVote">
        UPDATE discussion_comment
        SET voted_user_ids =
                CASE
                    WHEN voted_user_ids IS NULL THEN #{userId}
                    ELSE CONCAT(voted_user_ids, ',', #{userId})
                    END
        WHERE id = #{commentId}
    </update>
    <!-- 특정 토론의 작성자 ID 가져오기 -->
    <select id="getDiscussionAuthorById" resultType="string">
        SELECT user_id
        FROM discussion
        WHERE id = #{discussionId}
    </select>
    <!-- 가장 찬/반 합산이 많은 댓글 -->
    <select id="getFirstDiscussionComment" resultType="com.project.dto.DiscussionCommentDTO">
        SELECT id,
               content,
               `like`,
               unlike,
               user_id AS userId,
               discussion_id AS discussionId,
               (`like` + unlike) AS totalVotes
        FROM discussion_comment
        ORDER BY totalVotes DESC, created_at
        LIMIT 1
    </select>
    <!-- 두 번째로 찬/반 합산이 많은 댓글 -->
    <select id="getSecondDiscussionComment" resultType="com.project.dto.DiscussionCommentDTO">
        SELECT id,
               content,
               `like`,
               unlike,
               user_id AS userId,
               discussion_id AS discussionId,
               (`like` + unlike) AS totalVotes
        FROM discussion_comment
        ORDER BY totalVotes DESC, created_at
        LIMIT 1 OFFSET 1
    </select>
    <!-- 댓글 정렬 및 페이지네이션 -->
    <select id="getCommentsWithSortAndPagination" resultType="DiscussionCommentDTO">
        SELECT
        dc.*,
        u.id AS user_id
        FROM discussion_comment dc
        INNER JOIN user u ON dc.user_id = u.id
        WHERE dc.discussion_id = #{discussionId}
        <choose>
            <!-- 찬성순 정렬 -->
            <when test="pageInfo.sort == 'like'">
                ORDER BY dc.like DESC
            </when>
            <!-- 반대순 정렬 -->
            <when test="pageInfo.sort == 'dislike'">
                ORDER BY dc.unlike DESC
            </when>
                    <otherwise>
                        ORDER BY dc.created_at DESC
                    </otherwise>
        </choose>
        LIMIT #{pageInfo.size} OFFSET #{pageInfo.offset}
    </select>
    <!-- 댓글 총 개수 조회 -->
    <select id="getTotalCommentsByDiscussionId" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM discussion_comment
        WHERE discussion_id = #{discussionId}
    </select>
    <!-- 첫 번째 인기있는 의견 -->
    <select id="getFirstComment" resultType="DiscussionCommentDTO">
        SELECT * FROM discussion_comment ORDER BY `like` DESC LIMIT 1
#         SELECT * FROM discussion_comment LIMIT 1
    </select>
    <!-- 두 번째 인기있는 의견 -->
    <select id="getSecondComment" resultType="DiscussionCommentDTO">
        SELECT * FROM discussion_comment ORDER BY `like` DESC LIMIT 1 OFFSET 1
#         SELECT * FROM discussion_comment LIMIT 1 OFFSET 1
    </select>
    <select id="getDiscussionIdByCommentId" resultType="java.lang.Integer">
        SELECT discussion_id
        FROM discussion_comment
        WHERE id = #{commentId}
    </select>
    <!-- 특정 댓글의 찬성 개수 조회 -->
    <select id="getLikeCount" resultType="java.lang.Integer">
        SELECT `like` FROM discussion_comment WHERE id = #{commentId}
    </select>

    <!-- 특정 댓글의 반대 개수 조회 -->
    <select id="getUnlikeCount" resultType="java.lang.Integer">
        SELECT `unlike` FROM discussion_comment WHERE id = #{commentId}
    </select>
    <select id="getDiscussionCommentAuthor" resultType="java.lang.String">
        SELECT discussion_comment.user_id FROM discussion_comment WHERE id = #{commentId}
    </select>
</mapper>
